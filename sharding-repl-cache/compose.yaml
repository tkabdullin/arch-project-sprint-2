name: sharding-repl-cache

services:
  # ------------------------------------------
  # Config server 
  # ------------------------------------------
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports: 
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # ------------------------------------------
  # Shards 
  # ------------------------------------------
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports: 
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.2
    volumes:
      - shard1-data:/data/db
    command: 
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_replica1:
    image: mongo:latest
    container_name: shard1_replica1
    restart: always
    ports: 
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.3
    volumes:
      - shard1-replica1-data:/data/db
    command: 
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports: 
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.4
    volumes:
      - shard2-data:/data/db
    command: 
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_replica1:
    image: mongo:latest
    container_name: shard2_replica1
    restart: always
    ports: 
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - shard2-replica1-data:/data/db
    command: 
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # ------------------------------------------
  # Routers 
  # ------------------------------------------
  router1:
    image: mongo:latest
    container_name: router1
    restart: always
    ports: 
      - "27020:27020"
    networks: 
      app-network:
        ipv4_address: 173.17.0.6
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  router2:
    image: mongo:latest
    container_name: router2
    restart: always
    ports: 
      - "27021:27021"
    networks: 
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # ------------------------------------------
  # Cache 
  # ------------------------------------------
  redis1:
    image: "redis:latest"
    container_name: redis1
    ports:
      - "6379"
    volumes:
      - redis1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.8

  redis2:
    image: "redis:latest"
    container_name: redis2
    ports:
      - "6379"
    volumes:
      - redis2_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.9

  redis3:
    image: "redis:latest"
    container_name: redis3
    ports:
      - "6379"
    volumes:
      - redis3_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.10

  # ------------------------------------------
  # Application 
  # ------------------------------------------
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: pymongo_api/api_app #kazhem/pymongo_api:1.0.0
    depends_on:
      - router1
      - router2
      - shard1
      - shard1_replica1
      - shard2
      - shard2_replica1
      - configSrv
      - redis1
      - redis2
      - redis3
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://router1:27020,router2:27021"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis1:6379"
    networks: 
      app-network:
        ipv4_address: 173.17.0.11

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/26

volumes:
  config-data:
  shard1-data:
  shard1-replica1-data:
  shard2-data:
  shard2-replica1-data:
  redis1_data:
  redis2_data:
  redis3_data: